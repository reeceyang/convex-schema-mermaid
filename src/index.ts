import { GenericSchema, SchemaDefinition } from "convex/server";

const fieldToNode = (fieldName: string, fieldType: string) =>
  `${fieldName}: ${fieldType}`;

const linkFieldToNode = (fieldName: string, tableName: string) =>
  `${fieldToNode(fieldName, "id")} '${tableName}'`;

/**
 * Generate a Mermaid flowchart representation from a Convex schema.
 *
 * @param schema Convex schema (generated by `defineSchema`)
 * @returns Mermaid flowchart representation of the schema
 */
export const schemaToMermaid = (
  schema: SchemaDefinition<GenericSchema, true>
): string => {
  const subgraphs = Object.entries(schema.tables)
    .map(([tableName, table]) => {
      // TODO: not type safe!
      const fieldNodes = (
        Object.entries((table as any).documentType.json.value) as [
          string,
          any,
        ][]
      )
        .map(([fieldName, { fieldType }]) => {
          const node =
            fieldType.type === "id"
              ? linkFieldToNode(fieldName, fieldType.tableName)
              : fieldToNode(fieldName, fieldType.type);
          return `    ${tableName}.${fieldName}[${node}]`;
        })
        .join("\n");

      return `  subgraph ${tableName}\n${fieldNodes}\n  end\n`;
    })
    .join("");

  const links = Object.entries(schema.tables)
    .flatMap(([tableName, table]) =>
      (
        Object.entries((table as any).documentType.json.value) as [
          string,
          any,
        ][]
      ).map(([fieldName, { fieldType }]) => ({
        fieldName,
        fieldType: fieldType.type,
        tableName,
        linkedTableName: fieldType.tableName,
      }))
    )
    .filter(({ fieldType }) => fieldType === "id")
    .map(
      ({ fieldName, tableName, linkedTableName }) =>
        `  ${tableName}.${fieldName}-->${linkedTableName}`
    )
    .join("\n");

  return `flowchart LR\n${subgraphs}${links}`;
};
